<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

// numero de steps para que o bloco desça uma posição
steps_to_fall = room_speed

// indica se o bloco não pode ir mais para baixo
landed = false

// rotação inicial
block_rot_current = 0

// cor (sprite) do bloco
block_spr = scr_get_random_block_color() + 1

// altura inicial
block_y = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// avoid memory leaks
ds_grid_destroy(grid)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the block and add it to game grid
var gg, bw, bh, bx, by, r, c, clear_this_line

gg = global.game_grid

bw = grid_width
bh = grid_height
bx = block_x
by = block_y

ds_grid_add_grid_region(gg, grid, 0, 0, bw - 1, bh - 1, bx , by)

/// clear completed lines, if necessary
for (r = 1; r &lt; GAME_HEIGHT; r++) {
  clear_this_line = true
  for (c = 0; c &lt; GAME_WIDTH; c++) {
    if (ds_grid_get(gg, c, r) == 0) {
      clear_this_line = false
      break
    }
  }
  
  if (clear_this_line) ds_grid_remove_line(gg, r)
}

instance_destroy()
global.current_block = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if the block is landed skip this step
if (landed) exit
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// accelerate the fall of the block
if (keyboard_check(vk_down)) steps_to_fall -= 10;
else steps_to_fall--
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// moves the block to down, if possible
var bx, by, bw, bh, game_grid, nextpos_grid

bx = block_x
by = block_y
bh = grid_height
bw = grid_width

if (steps_to_fall &lt;= 0) {

  if ((by + bh) == GAME_HEIGHT) {
    landed = true
  } else {
    block_y++
    
    if (scr_block_check_collision(self)) {
      block_y--
      landed = true
    }
  }  

  if (!landed) steps_to_fall = room_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// verify if the block is landed
if (landed) {
  alarm[0] = 2 // destroy this block and create other after 5 steps
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the block

var r, c, w, h, posx, posy

w = grid_width
h = grid_height

for (r = 0; r &lt; h; r++) {
  for (c = 0; c &lt; w; c++) {
    if (ds_grid_get(grid, c, r) != 0) {
        posx = (block_x + c) * 32
        posy = (block_y + r) * 32
        draw_sprite(block_spr - 1, 0, posx, posy);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move to right
    
// verifica se ele está no limite direito da tela
if (block_x + grid_width == GAME_WIDTH) exit

block_x++
if (scr_block_check_collision(self)) {
  block_x--
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// rotate
var test_grid, 
  h = grid_height,
  w = grid_width,
  bx = block_x,
  by = block_y

test_grid = ds_grid_create(h, w)

if (bx + h &gt;= GAME_WIDTH) {
  bx = GAME_WIDTH - h
}

if (by + w &gt;= GAME_HEIGHT) {
  by = GAME_HEIGHT - w
}

ds_grid_add_grid_region(test_grid, global.game_grid, bx, by, bx + h - 1, by + w - 1, 0, 0)

if (ds_grid_empty(test_grid)) {
  can_rotate = true
  block_rot_current++
  if (block_rot_current &gt; block_rot_max) block_rot_current = 0

  block_x = bx
  block_y = by
  ds_grid_resize(grid, h, w)
  ds_grid_clear(grid, 0)
  grid_width = h
  grid_height = w
} else {
  can_rotate = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move to left
var bx

// verifica se ele está no limite esquerdo da tela
if (block_x - 1 &lt; 0) exit

block_x--

if (scr_block_check_collision(self)) {
  // se colidir volta pra posição anterior
  block_x++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
